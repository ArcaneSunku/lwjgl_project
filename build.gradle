apply plugin: "java-library"
import org.gradle.internal.os.OperatingSystem

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets.main.java.srcDirs = ["src/"]
sourceSets.main.resources.srcDirs = ["assets/"]

sourceSets.test.java.srcDirs = ["test/"]
sourceSets.test.resources.srcDirs = ["assets/"]

project.ext.assetsDir = new File("assets/")
project.ext.mainClassName = "git.arcane.Main"

project.ext.lwjglVersion = "3.3.2"
project.ext.jomlVersion = "1.10.5"
project.ext.log4jVersion = "2.20.0"

switch(OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        break
    case OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = "natives-windows"
        break
}

tasks.register('run', JavaExec) {
    dependsOn classes
    mainClass = project.ext.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.ext.assetsDir
    ignoreExitValue = true as JavaExecSpec

    args = ["loggerLevel=warn"]

    if(OperatingSystem.current() == OperatingSystem.MAC_OS)
        jvmArgs += "-XstartonFirstThread"
}

tasks.register('debug', JavaExec) {
    dependsOn classes
    mainClass = project.ext.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.ext.assetsDir

    ignoreExitValue = true as JavaExecSpec
    debug = true
}

tasks.register('dist', Jar) {
    with jar
    dependsOn classes
    dependsOn configurations.runtimeClasspath

    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes 'Main-Class' : project.ext.mainClassName
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

group = "git.arcane.sunku"
version = "0.0.1"

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(platform("org.junit:junit-bom:5.9.1"))
    testImplementation("org.junit.jupiter:junit-jupiter")

    implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-slf4j2-impl:${log4jVersion}"

    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-bgfx"
    implementation "org.lwjgl:lwjgl-freetype"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-nanovg"
    implementation "org.lwjgl:lwjgl-nuklear"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-par"
    implementation "org.lwjgl:lwjgl-stb"
    implementation "org.lwjgl:lwjgl-vulkan"
    implementation "org.joml:joml:${jomlVersion}"

    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-bgfx::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-freetype::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nanovg::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nuklear::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-par::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
}

tasks.test {
    useJUnitPlatform()
}